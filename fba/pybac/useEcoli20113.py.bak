from __future__ import print_function
import sys
sys.path.append('/usr/lib/python2.7/dist-packages')

import cobra
import suitCondition
#import numpy as np
import hashStruct
import clnySize2GrowthRate
import gene2React
##################################
#Author: xiaopeng xu
#Email: charlesxu90@gmail.com
##################################

# main process
#solver = 'glpk'     # change to 'gurobi' or 'cplex'
####1. read sbml model
sbml_file = '../data/msb201165-s3.xml'
cobra_model = cobra.io.read_sbml_model(sbml_file, old_sbml='true')

####2. Modify module to suit BW25113
cobra_model = suitCondition.suit_bw25113(cobra_model)
#cobra_model = suitCondition.gap_filling(cobra_model)

####3. Set constraints for LB media/culture
cobra_model = suitCondition.LB_media(cobra_model)

####4. Gene knockout
# Set constraints of reactions, which relates to knockout genes
gene2gid = hashStruct.AutoVivification()
Gene_Reacts = hashStruct.AutoVivification()    # Create a Hash data struct

gene2gid = gene2React.gene2geneID()
Gene_Reacts = gene2React.geneID2react(gene2gid)

[setattr(x, 'objective_coefficient', 0.) for x in cobra_model.reactions]
obj_rxn = cobra_model.reactions.Ec_biomass_iJO1366_WT_53p95M
obj_rxn.objective_coefficient = 1

####5. Infer Growth Rate from Colony Size data
Growth_Rates = clnySize2GrowthRate.csize2grate('../data/Temperature.tsv')

####6. Set the objective function
#Optimal Growth Rate for WT: 8.5712968149
Temps = ['16C', '18C', '20C', '40C', '42C', '43.5C', '45C']

counter = 1  # used for debugging
for geneId in Gene_Reacts:
    if counter <= 1:
        counter = counter + 1
    else:
        break

    # Modify reactions
    for rxnId in Gene_Reacts[geneId]:
        rxn = cobra_model.reactions.get_by_id(rxnId)
        if (Gene_Reacts[geneId][rxnId] == 0.0):
            rxn.upper_bound = rxn.lower_bound = 0.01
        else:
            rxn.upper_bound = Gene_Reacts[geneId][rxnId] * rxn.upper_bound
            rxn.lower_bound = Gene_Reacts[geneId][rxnId] * rxn.lower_bound

    # Optimize for each knockout genes
    try:
        cobra_model.optimize()
    except ValueError:
        print("Gene " + geneId + ": error in optimizing!\n", file=sys.stdout)
        continue

    try:
        Growth_Rates[geneId]
    except NameError or KeyError:
        print("Gene " + geneId + ": no growth rate data.\n", file=sys.stdout)
        continue

    # Conduct FVA
    print("Gene " + geneId + ": conducting fva:", file=sys.stdout)
    tpIdx = 0
    for growthRate in Growth_Rates[geneId]:
        obj_rxn.upper_bound = obj_rxn.lower_bound = growthRate
        try:
            FVA_rst = cobra.flux_analysis.flux_variability_analysis(
                cobra_model, fraction_of_optimum=1.0,
                number_of_processes=30)

        except ValueError:
            print ("\tValueError while fva of " + Temps[tpIdx], file=sys.stdout)
            print("\tOptGR: " + str(cobra_model.solution.f) + "  ClnyGR: " +
                  str(growthRate), file=sys.stdout)
            tpIdx = tpIdx + 1
            continue

        print("\tfva for " + Temps[tpIdx], file=sys.stdout)
        print("\tOptGR: " + str(cobra_model.solution.f) + "  ClnyGR: " +
              str(growthRate), file=sys.stdout)

        fva_file = open('../result/' + geneId +
                        Temps[tpIdx] + '.txt', "w+")
        print("OptGR: " + str(cobra_model.solution.f) + "\tClnyGR: " +
              str(growthRate) + "\n", file=fva_file)

        print('Reaction', 'Max flux', 'Min flux',
              'Reactants', 'Products', file=fva_file, sep='\t')
        rxns_list = cobra_model.reactions
        for rxn in rxns_list:

            reactants = ''
            if(len(rxn.reactants) == 0):
                reactants = '-'
            else:
                for i in range(1, len(rxn.reactants)):
                    reactants += str(rxn.reactants[i - 1])

            products = ''
            if(len(rxn.products) == 0):
                    products = '-'
            else:
                for i in range(1, len(rxn.products)):
                    products += str(rxn.products[i - 1])

            print (rxn.id, format(FVA_rst[rxn.id]["maximum"], '.2f'),
                   format(FVA_rst[rxn.id]["minimum"], '.2f'),
                   reactants, products,
                   file=fva_file, sep='\t')
        fva_file.close()
        tpIdx = tpIdx + 1
    print("\n", file=sys.stdout)

#End of file
